@use 'true' as *;
@use 'unit';

@include describe('strip()') {
  @include it('strips the unit from input') {
    @include assert-equal(unit.strip(1px), 1);
    @include assert-equal(unit.strip(12em), 12);
    @include assert-equal(unit.strip(9rem), 9);
    @include assert-equal(unit.strip(3deg), 3);
    @include assert-equal(unit.strip(16%), 16);
  }
}

@include describe('to-rem-with-base()') {
  @include describe('when value is not a number') {
    @include it('throws an error') {
      @include assert-equal(unit.to-rem-with-base('solid 1px'),
        'Error [to-rem-with-base()]: Value "solid 1px" is not a number.');
    }
  }

  @include describe('when base is not a number') {
    @include it('throws an error') {
      @include assert-equal(unit.to-rem-with-base(64px, '16px'),
        'Error [to-rem-with-base()]: Base "16px" is not a number.');
    }
  }

  @include describe('when base is set to 16px') {
    $base: 16px;

    @include describe('when value is zero') {
      @include it('returns zero') {
        @include assert-equal(unit.to-rem-with-base(0, $base), 0);
      }
    }

    @include describe('when input is provided in em') {
      @include it('converts em to rem verbatim') {
        @include assert-equal(unit.to-rem-with-base(2em, $base), 2rem);
      }
    }

    @include describe('when input is provided in pixels') {
      @include it('converts pixels to rem') {
        @include assert-equal(unit.to-rem-with-base(32px, $base), 2rem);
      }
    }
  }
}

@include describe('to-rem()') {
  @include describe('when base is a percentage') {
    $base: 50%;

    @include it('converts to rem using a fraction of the root value') {
      @include assert-equal(unit.to-rem(32px, $base), 4rem);
    }
  }

  @include describe('when base is provided in rem') {
    $base: 3rem;

    @include it('converts to rem using rem value') {
      @include assert-equal(unit.to-rem(144px, $base), 3rem);
    }
  }

  @include describe('when base is not provided') {
    @include it('converts value to rem') {
      @include assert-equal(unit.to-rem(1), 0.0625rem);
      @include assert-equal(unit.to-rem(56), 3.5rem);
      @include assert-equal(unit.to-rem(128), 8rem);
      @include assert-equal(unit.to-rem(3840), 240rem);
    }
  }

  @include describe('when multiple values are provided') {
    $values: 32px, 64px;

    @include it('converts values to rem') {
      @include assert-equal(unit.to-rem($values), 2rem 4rem);
    }
  }
}
