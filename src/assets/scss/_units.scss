@use 'throw';
@use 'sass:list';
@use 'sass:meta';
@use 'sass:math';

@function strip-unit($num) {
  @return math.div($num, $num * 0 + 1);
}

@function convert($value, $base: null) {
  @if meta.type-of($value) != 'number' {
    @return throw.error(
      $message: 'Value #{meta.inspect($value)} is not a number.',
      $source: 'convert()',
      $catch: true
    );
  }
  @if meta.type-of($base) != 'number' {
    @return throw.error(
      $message: 'Base #{meta.inspect($base)} is not a number.',
      $source: 'convert()',
      $catch: true
    );
  }
  @if $value == 0 {
    @return 0;
  }
  @if math.unit($value) == 'em' {
    $value: strip-unit($value) * 1rem;
  }
  @if math.unit($value) != 'rem' {
    $value: math.div(strip-unit($value), strip-unit($base)) * 1rem;
  }
  @return $value;
}

@function to-rem($values, $base: 100%) {
  $rem-values: ();
  $count: list.length($values);
  @if math.unit($base) == '%' {
    $base: math.div($base, 100%) * 16px;
  }
  @if math.unit($base) == 'rem' {
    $base: strip-unit($base) * 16px;
  }
  @if $count == 1 {
    @return convert($values, $base);
  }
  @for $i from 1 through $count {
    $rem-values: list.append($rem-values, convert(list.nth($values, $i), $base));
  }
  @return $rem-values;
}
